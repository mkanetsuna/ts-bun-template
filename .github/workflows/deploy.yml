name: Deploy to Cloud Run

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: typescript-bun-app

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest

    - name: Install dependencies
      run: bun install

    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Configure Docker
      run: gcloud auth configure-docker

    - name: Build and Push Docker image
      run: |
        docker build -t gcr.io/$PROJECT_ID/$SERVICE_NAME:${{ github.sha }} .
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:${{ github.sha }}

    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy $SERVICE_NAME \
          --image gcr.io/$PROJECT_ID/$SERVICE_NAME:${{ github.sha }} \
          --platform managed \
          --region us-central1 \
          --allow-unauthenticated

    - name: Set up Cloud Scheduler
      run: |
        set -e  # エラーが発生した時点でスクリプトを終了
  
        # 必要な環境変数が設定されていることを確認
        if [ -z "$SERVICE_NAME" ] || [ -z "$REGION" ] || [ -z "$SCHEDULER_JOB_NAME" ] || [ -z "$SCHEDULER_TIMEZONE" ]; then
          echo "Error: Required environment variables are not set."
          exit 1
        fi
    
        # Cloud Run サービスのURLを取得
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region $REGION --format 'value(status.url)')
        if [ -z "$SERVICE_URL" ]; then
          echo "Error: Failed to retrieve Cloud Run service URL."
          exit 1
        fi
    
        SCHEDULER_HTTP_TARGET="${SERVICE_URL}/scheduled-task"
        echo "Scheduler will target: $SCHEDULER_HTTP_TARGET"
            
        # Check if the job already exists
        if gcloud scheduler jobs describe $SCHEDULER_JOB_NAME --location $REGION 2>/dev/null; then
          echo "Updating existing Cloud Scheduler job: $SCHEDULER_JOB_NAME"
          gcloud scheduler jobs update http $SCHEDULER_JOB_NAME \
            --location $REGION \
            --schedule "0 8 * * 1-5" \
            --time-zone $SCHEDULER_TIMEZONE \
            --uri "$SCHEDULER_HTTP_TARGET" \
            --http-method GET
        else
          echo "Creating new Cloud Scheduler job: $SCHEDULER_JOB_NAME"
          gcloud scheduler jobs create http $SCHEDULER_JOB_NAME \
            --location $REGION \
            --schedule "0 8 * * 1-5" \
            --time-zone $SCHEDULER_TIMEZONE \
            --uri "$SCHEDULER_HTTP_TARGET" \
            --http-method GET
        fi
    
        echo "Cloud Scheduler job setup completed successfully."

    - name: Lint and format check
      run: |
        bun run format